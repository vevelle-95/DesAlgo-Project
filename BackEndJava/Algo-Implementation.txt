procedure TSP_Backtracking(current_city, visited[], path, current_cost):
    if all cities are visited:
        if current_cost + distance[current_spot][start_spot] < best_cost:
            best_cost ← current_cost + distance[current_spot][start_spot]
            best_path ← path + [start_spot]
        return

    for next_spot from 0 to N-1:
        if not visited[next_spot] and distance[current_spot][next_spot] ≠ 0:
            next_cost ← current_cost + distance[current_spot][next_spot]
            if next_cost < best_cost:
                visited[next_spot] ← true
                TSP_Backtracking(next_spot, visited, path + [next_spot], next_cost)
                visited[next_spot] ← false

Variables Explained
distance[][] - 2D matrix holding travel times or distances.
visited[] - Boolean array marking spots/districts already visited.
current_spot - spot/node currently being explored.
start_spot - Starting point (usually node 0).
path - List of spots/nodes visited so far.
current_cost - Cost so far for the current path.
best_cost - Globally known lowest route cost (initially set to ∞).
best_path - The path with the lowest cost found.
